# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _EMM_Model
else:
    import _EMM_Model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class WMM_Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _EMM_Model.delete_WMM_Model

    def __init__(self, *args):
        _EMM_Model.WMM_Model_swiginit(self, _EMM_Model.new_WMM_Model(*args))

    def setEM(self):
        return _EMM_Model.WMM_Model_setEM(self)

    def setDate(self, date):
        return _EMM_Model.WMM_Model_setDate(self, date)

    def setLonLat(self, lon, lat):
        return _EMM_Model.WMM_Model_setLonLat(self, lon, lat)

    def setHeight(self, h):
        return _EMM_Model.WMM_Model_setHeight(self, h)

    def getX(self):
        return _EMM_Model.WMM_Model_getX(self)

    def getY(self):
        return _EMM_Model.WMM_Model_getY(self)

    def getZ(self):
        return _EMM_Model.WMM_Model_getZ(self)

    def getdX(self):
        return _EMM_Model.WMM_Model_getdX(self)

    def getdY(self):
        return _EMM_Model.WMM_Model_getdY(self)

    def getdZ(self):
        return _EMM_Model.WMM_Model_getdZ(self)

    def getDate(self):
        return _EMM_Model.WMM_Model_getDate(self)

    def getLon(self):
        return _EMM_Model.WMM_Model_getLon(self)

    def getLat(self):
        return _EMM_Model.WMM_Model_getLat(self)

    def getHeight(self):
        return _EMM_Model.WMM_Model_getHeight(self)
    NumTerms = property(_EMM_Model.WMM_Model_NumTerms_get, _EMM_Model.WMM_Model_NumTerms_set)
    LoadedEpoch = property(_EMM_Model.WMM_Model_LoadedEpoch_get, _EMM_Model.WMM_Model_LoadedEpoch_set)
    nMax = property(_EMM_Model.WMM_Model_nMax_get, _EMM_Model.WMM_Model_nMax_set)
    nMaxEMM = property(_EMM_Model.WMM_Model_nMaxEMM_get, _EMM_Model.WMM_Model_nMaxEMM_set)
    Ellip = property(_EMM_Model.WMM_Model_Ellip_get, _EMM_Model.WMM_Model_Ellip_set)
    CoordSpherical = property(_EMM_Model.WMM_Model_CoordSpherical_get, _EMM_Model.WMM_Model_CoordSpherical_set)
    CoordGeodetic = property(_EMM_Model.WMM_Model_CoordGeodetic_get, _EMM_Model.WMM_Model_CoordGeodetic_set)
    UserDate = property(_EMM_Model.WMM_Model_UserDate_get, _EMM_Model.WMM_Model_UserDate_set)
    GeoMagneticElements = property(_EMM_Model.WMM_Model_GeoMagneticElements_get, _EMM_Model.WMM_Model_GeoMagneticElements_set)
    Geoid = property(_EMM_Model.WMM_Model_Geoid_get, _EMM_Model.WMM_Model_Geoid_set)

# Register WMM_Model in _EMM_Model:
_EMM_Model.WMM_Model_swigregister(WMM_Model)
class EMM_Model(WMM_Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, CoeffFile, date, lon, lat, h):
        _EMM_Model.EMM_Model_swiginit(self, _EMM_Model.new_EMM_Model(CoeffFile, date, lon, lat, h))

    def setEM(self):
        return _EMM_Model.EMM_Model_setEM(self)
    __swig_destroy__ = _EMM_Model.delete_EMM_Model

# Register EMM_Model in _EMM_Model:
_EMM_Model.EMM_Model_swigregister(EMM_Model)

