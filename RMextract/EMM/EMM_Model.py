# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from sys import version_info

if version_info >= (2, 6, 0):

    def swig_import_helper():
        import imp
        from os.path import dirname

        fp = None
        try:
            fp, pathname, description = imp.find_module(
                "_EMM_Model", [dirname(__file__)]
            )
        except ImportError:
            import _EMM_Model

            return _EMM_Model
        if fp is not None:
            try:
                _mod = imp.load_module("_EMM_Model", fp, pathname, description)
            finally:
                fp.close()
            return _mod

    _EMM_Model = swig_import_helper()
    del swig_import_helper
else:
    import _EMM_Model
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == "SwigPyObject":
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError(name)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (
        self.__class__.__module__,
        self.__class__.__name__,
        strthis,
    )


try:
    _object = object
    _newclass = 1
except AttributeError:

    class _object:
        pass

    _newclass = 0


class WMM_Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WMM_Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WMM_Model, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _EMM_Model.delete_WMM_Model
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _EMM_Model.new_WMM_Model(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setEM(self):
        return _EMM_Model.WMM_Model_setEM(self)

    def setDate(self, *args):
        return _EMM_Model.WMM_Model_setDate(self, *args)

    def setLonLat(self, *args):
        return _EMM_Model.WMM_Model_setLonLat(self, *args)

    def setHeight(self, *args):
        return _EMM_Model.WMM_Model_setHeight(self, *args)

    def getX(self):
        return _EMM_Model.WMM_Model_getX(self)

    def getY(self):
        return _EMM_Model.WMM_Model_getY(self)

    def getZ(self):
        return _EMM_Model.WMM_Model_getZ(self)

    def getdX(self):
        return _EMM_Model.WMM_Model_getdX(self)

    def getdY(self):
        return _EMM_Model.WMM_Model_getdY(self)

    def getdZ(self):
        return _EMM_Model.WMM_Model_getdZ(self)

    def getDate(self):
        return _EMM_Model.WMM_Model_getDate(self)

    def getLon(self):
        return _EMM_Model.WMM_Model_getLon(self)

    def getLat(self):
        return _EMM_Model.WMM_Model_getLat(self)

    def getHeight(self):
        return _EMM_Model.WMM_Model_getHeight(self)

    __swig_setmethods__["NumTerms"] = _EMM_Model.WMM_Model_NumTerms_set
    __swig_getmethods__["NumTerms"] = _EMM_Model.WMM_Model_NumTerms_get
    if _newclass:
        NumTerms = _swig_property(
            _EMM_Model.WMM_Model_NumTerms_get, _EMM_Model.WMM_Model_NumTerms_set
        )
    __swig_setmethods__["LoadedEpoch"] = _EMM_Model.WMM_Model_LoadedEpoch_set
    __swig_getmethods__["LoadedEpoch"] = _EMM_Model.WMM_Model_LoadedEpoch_get
    if _newclass:
        LoadedEpoch = _swig_property(
            _EMM_Model.WMM_Model_LoadedEpoch_get, _EMM_Model.WMM_Model_LoadedEpoch_set
        )
    __swig_setmethods__["nMax"] = _EMM_Model.WMM_Model_nMax_set
    __swig_getmethods__["nMax"] = _EMM_Model.WMM_Model_nMax_get
    if _newclass:
        nMax = _swig_property(
            _EMM_Model.WMM_Model_nMax_get, _EMM_Model.WMM_Model_nMax_set
        )
    __swig_setmethods__["nMaxEMM"] = _EMM_Model.WMM_Model_nMaxEMM_set
    __swig_getmethods__["nMaxEMM"] = _EMM_Model.WMM_Model_nMaxEMM_get
    if _newclass:
        nMaxEMM = _swig_property(
            _EMM_Model.WMM_Model_nMaxEMM_get, _EMM_Model.WMM_Model_nMaxEMM_set
        )
    __swig_setmethods__["Ellip"] = _EMM_Model.WMM_Model_Ellip_set
    __swig_getmethods__["Ellip"] = _EMM_Model.WMM_Model_Ellip_get
    if _newclass:
        Ellip = _swig_property(
            _EMM_Model.WMM_Model_Ellip_get, _EMM_Model.WMM_Model_Ellip_set
        )
    __swig_setmethods__["CoordSpherical"] = _EMM_Model.WMM_Model_CoordSpherical_set
    __swig_getmethods__["CoordSpherical"] = _EMM_Model.WMM_Model_CoordSpherical_get
    if _newclass:
        CoordSpherical = _swig_property(
            _EMM_Model.WMM_Model_CoordSpherical_get,
            _EMM_Model.WMM_Model_CoordSpherical_set,
        )
    __swig_setmethods__["CoordGeodetic"] = _EMM_Model.WMM_Model_CoordGeodetic_set
    __swig_getmethods__["CoordGeodetic"] = _EMM_Model.WMM_Model_CoordGeodetic_get
    if _newclass:
        CoordGeodetic = _swig_property(
            _EMM_Model.WMM_Model_CoordGeodetic_get,
            _EMM_Model.WMM_Model_CoordGeodetic_set,
        )
    __swig_setmethods__["UserDate"] = _EMM_Model.WMM_Model_UserDate_set
    __swig_getmethods__["UserDate"] = _EMM_Model.WMM_Model_UserDate_get
    if _newclass:
        UserDate = _swig_property(
            _EMM_Model.WMM_Model_UserDate_get, _EMM_Model.WMM_Model_UserDate_set
        )
    __swig_setmethods__["GeoMagneticElements"] = (
        _EMM_Model.WMM_Model_GeoMagneticElements_set
    )
    __swig_getmethods__["GeoMagneticElements"] = (
        _EMM_Model.WMM_Model_GeoMagneticElements_get
    )
    if _newclass:
        GeoMagneticElements = _swig_property(
            _EMM_Model.WMM_Model_GeoMagneticElements_get,
            _EMM_Model.WMM_Model_GeoMagneticElements_set,
        )
    __swig_setmethods__["Geoid"] = _EMM_Model.WMM_Model_Geoid_set
    __swig_getmethods__["Geoid"] = _EMM_Model.WMM_Model_Geoid_get
    if _newclass:
        Geoid = _swig_property(
            _EMM_Model.WMM_Model_Geoid_get, _EMM_Model.WMM_Model_Geoid_set
        )


WMM_Model_swigregister = _EMM_Model.WMM_Model_swigregister
WMM_Model_swigregister(WMM_Model)


class EMM_Model(WMM_Model):
    __swig_setmethods__ = {}
    for _s in [WMM_Model]:
        __swig_setmethods__.update(getattr(_s, "__swig_setmethods__", {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMM_Model, name, value)
    __swig_getmethods__ = {}
    for _s in [WMM_Model]:
        __swig_getmethods__.update(getattr(_s, "__swig_getmethods__", {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EMM_Model, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EMM_Model.new_EMM_Model(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setEM(self):
        return _EMM_Model.EMM_Model_setEM(self)

    __swig_destroy__ = _EMM_Model.delete_EMM_Model
    __del__ = lambda self: None


EMM_Model_swigregister = _EMM_Model.EMM_Model_swigregister
EMM_Model_swigregister(EMM_Model)

# This file is compatible with both classic and new-style classes.
